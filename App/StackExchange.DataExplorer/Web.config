<?xml version="1.0"?>
<!--
    Note: As an alternative to hand editing this file you can use the
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in
    machine.config.comments usually located in
    \Windows\Microsoft.Net\Framework\v2.x\Config
-->
<configuration>
  <configSections>
    <sectionGroup name="SimpleErrorHandler">
      <section name="errorLog" type="System.Configuration.SingleTagSectionHandler"/>
      <section name="ignoreRegex" type="System.Configuration.DictionarySectionHandler"/>
    </sectionGroup>
    <sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
      <section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true"/>
      <section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true"/>
      <section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true"/>
      <section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true"/>
    </sectionGroup>
  </configSections>
  <dotNetOpenAuth>
    <!-- This is an optional configuration section where aspects of dotnetopenauth can be customized. -->
    <!-- For a complete set of configuration options see http://www.dotnetopenauth.net/developers/code-snippets/configuration-options/ -->
    <openid>
      <relyingParty>
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
                    with OPs that use Attribute Exchange (in various formats). -->
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
               with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth"/>
          <add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty"/>
        </behaviors>
        <security requireSsl="false">
          <!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
          <!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
            <add endpoint="https://www.google.com/accounts/o8/ud" />
          </trustedProviders>-->
        </security>
      </relyingParty>
      <provider/>
    </openid>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
          <!--<add name="localhost" />-->
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
    <!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
    <reporting enabled="true"/>
  </dotNetOpenAuth>
  <system.diagnostics>
    <!-- If we ever need to debug odata ... this can be commented back in
    <sources>

      <source name="System.ServiceModel.MessageLogging" switchValue="Warning, ActivityTracing" >
        <listeners>
          <add name="ServiceModelTraceListener"/>
        </listeners>
      </source>

      <source name="System.ServiceModel" switchValue="Verbose,ActivityTracing"                >
        <listeners>
          <add name="ServiceModelTraceListener"/>
        </listeners>
      </source>
      <source name="System.Runtime.Serialization" switchValue="Verbose,ActivityTracing">
        <listeners>
          <add name="ServiceModelTraceListener"/>
        </listeners>
      </source>

    </sources>
    <sharedListeners>
      <add initializeData="c:\App_tracelog.svclog"
                                      type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                                      name="ServiceModelTraceListener" traceOutputOptions="Timestamp"/>
    </sharedListeners>
    -->
  </system.diagnostics>
  <connectionStrings>
    <add name="AppConnection" connectionString="Data Source=.\SQLExpress;Initial Catalog=DataExplorer;Uid=Asheesh-PC\prateek;Pwd=qwerty123;Integrated Security=True;" providerName="System.Data.SqlClient"/>
    <add name="ReaderConnection" connectionString="server=127.0.0.1;Port=3306;Database=aca;Uid=root;password=root;"/>
  </connectionStrings>
  <system.web>
    <httpRuntime requestValidationMode="2.0" executionTimeout="9999"/>
    <!--
            Set compilation debug="true" to insert debugging
            symbols into the compiled page. Because this
            affects performance, set this value to true only
            during development.
    -->
    <compilation debug="false" targetFramework="4.0">
      <assemblies>
        <add assembly="System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
        <add assembly="System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
        <add assembly="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
        <add assembly="System.Web.WebPages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </assemblies>
    </compilation>
    <!--
            The <authentication> section enables configuration
            of the security authentication mode used by
            ASP.NET to identify an incoming user.
    -->
    <authentication mode="Forms">
      <forms loginUrl="~/account/login" timeout="2880" slidingExpiration="true"/>
    </authentication>
    <membership>
      <providers>
        <clear/>
      </providers>
    </membership>
    <profile>
      <providers>
        <clear/>
        <add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" connectionStringName="AppConnection" applicationName="/"/>
      </providers>
    </profile>
    <roleManager enabled="false">
      <providers>
        <clear/>
        <add connectionStringName="AppConnection" applicationName="/" name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
        <add applicationName="/" name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
      </providers>
    </roleManager>
    <customErrors mode="RemoteOnly">
      <error statusCode="404" redirect="/404"/>
    </customErrors>
    <!--
            The <customErrors> section enables configuration
            of what to do if/when an unhandled error occurs
            during the execution of a request. Specifically,
            it enables developers to configure html error pages
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
    -->
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID" validateRequest="false">
      <namespaces>
        <add namespace="System.Web.Mvc"/>
        <add namespace="System.Web.Mvc.Ajax"/>
        <add namespace="System.Web.Mvc.Html"/>
        <add namespace="System.Web.Routing"/>
        <add namespace="System.Linq"/>
        <add namespace="System.Collections.Generic"/>
        <add namespace="System.Web.Helpers"/>
        <add namespace="System.Web.WebPages"/>
      </namespaces>
    </pages>
    <httpHandlers>
      <add verb="POST,GET,HEAD" path="errors" type="SimpleErrorHandler.ErrorLogPageFactory, SimpleErrorHandler"/>
      <add verb="POST,GET,HEAD" path="errors/*" type="SimpleErrorHandler.ErrorLogPageFactory, SimpleErrorHandler"/>
      <add verb="POST,GET,HEAD" path="errors/*/*" type="SimpleErrorHandler.ErrorLogPageFactory, SimpleErrorHandler"/>
    </httpHandlers>
    <httpModules>
      <add name="ErrorLog" type="SimpleErrorHandler.ErrorLogModule, SimpleErrorHandler"/>
    </httpModules>
  </system.web>
  <!--
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
  -->
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="odata">
          <match url="^([^/]+)/atom/?(.*)$"/>
          <action type="Rewrite" url="odata.svc/{R:2}?5D6DA575E16342AEB6AF9177FF673569={R:1}" appendQueryString="true"/>
        </rule>
        <rule name="cloudexchange" stopProcessing="true">
          <match url=".*"/>
          <conditions>
            <add input="{HTTP_HOST}" pattern="odata.stackexchange.com"/>
          </conditions>
          <action type="Redirect" url="http://data.stackexchange.com/{R:0}"/>
        </rule>
      </rules>
    </rewrite>
    <urlCompression doDynamicCompression="true" dynamicCompressionBeforeCache="true"/>
    <httpCompression noCompressionForHttp10="false" noCompressionForProxies="false" dynamicCompressionDisableCpuUsage="93" dynamicCompressionEnableCpuUsage="93" staticCompressionDisableCpuUsage="99" staticCompressionEnableCpuUsage="99">
      <scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll" staticCompressionLevel="9" dynamicCompressionLevel="4"/>
    </httpCompression>
    <httpErrors errorMode="Custom">
      <remove statusCode="404"/>
      <error statusCode="404" responseMode="ExecuteURL" path="/404"/>
    </httpErrors>
    <modules runAllManagedModulesForAllRequests="true">
      <add name="ErrorLog" type="SimpleErrorHandler.ErrorLogModule, SimpleErrorHandler"/>
    </modules>
    <handlers>
      <remove name="UrlRoutingHandler"/>
      <add name="SimpleErrorHandler" verb="POST,GET,HEAD" path="errors" type="SimpleErrorHandler.ErrorLogPageFactory, SimpleErrorHandler"/>
    </handlers>
    <validation validateIntegratedModeConfiguration="false"/>
    <security>
      <requestFiltering allowDoubleEscaping="true"/>
    </security>
    <staticContent>
      <remove fileExtension=".woff"/>
      <mimeMap fileExtension=".woff" mimeType="application/font-woff"/>
    </staticContent>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.2.18.0" newVersion="2.2.18.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234"/>
      </dependentAssembly>
    </assemblyBinding>
    <!-- This prevents the Windows Event Log from frequently logging that HMAC1 is being used (when the other party needs it). -->
    <legacyHMACWarning enabled="0"/>
    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
         to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
         <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
           <dependentAssembly>
             <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
             <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
           </dependentAssembly>
         </assemblyBinding> -->
  </runtime>
  <SimpleErrorHandler>
    <errorLog type="SimpleErrorHandler.MemoryErrorLog, SimpleErrorHandler" size="25"/>
  </SimpleErrorHandler>
  <location path="errors">
    <system.web>
      <authorization>
        <allow roles="Admin"/>
        <deny users="*"/>
      </authorization>
    </system.web>
  </location>
  <system.serviceModel>
    <services>
      <service name="Schedule" behaviorConfiguration="DataServiceBehavior">
        <endpoint binding="webHttpBinding" contract="System.Data.Services.IRequestHandler"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="DataServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true"/>
  </system.serviceModel>
  <system.net>
    <defaultProxy enabled="true"/>
    <settings>
      <!-- This setting causes .NET to check certificate revocation lists (CRL) 
       before trusting HTTPS certificates.  But this setting tends to not 
       be allowed in shared hosting environments. -->
      <!--<servicePointManager checkCertificateRevocationList="true"/>-->
    </settings>
  </system.net>
  <uri>
    <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
         which is necessary for OpenID urls with unicode characters in the domain/host name.
         It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
    <idn enabled="All"/>
    <iriParsing enabled="true"/>
  </uri>
</configuration>